<?php

namespace App\Models;

use App\Helpers\Helper;
use App\Http\Controllers\Admin\AdminController;
use App\Http\Traits\I18n;
use App\Models\CustomButton;
use App\Models\Municipality;
use Illuminate\Contracts\Pagination\LengthAwarePaginator;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\MorphMany;
use Illuminate\Database\Eloquent\SoftDeletes;
use Illuminate\Http\Request;

class Landmark extends Model
{
    use HasFactory, SoftDeletes, I18n;

    const DIR = 'landmark';
    const DIR_GALLERY = 'gallery';

    // cover sizes
    const MAIN_SIZE = 386 . '_';
    const SIZES = [
        [960 => 480],
        [773 => 564],
        [386 => 282],
        [320 => 368],
        [69 => 69],
    ];

    const SIZES_GALLERY = [
        [445 => 621],
        [125 => 175],
    ];

    protected $table = 'landmarks';

    protected $fillable = [
        'logo',
        'slug',
        'municipality_id',
        'longitude',
        'latitude',
        'working_hours',
        'active_to',
        'created_by',
        'updated_by',
    ];

    protected $casts = [
        'working_hours' => 'array',
    ];

    /**
     * Get the gallery for the landmark.
     *
     * @return HasMany
     */
    public function gallery(): HasMany
    {
        return $this->hasMany(LandmarkGallery::class);
    }

    /**
     * Retrieves the directory path for the landmark model.
     *
     * This method returns the directory path for the landmark model. The directory path is constructed based on the ID of the municipality.
     * The directory path is generated by concatenating the main directory path from the AdminController class, the constant DIR from the Municipality class,
     * and the result of dividing the ID of the landmark by 1000.
     *
     * @return string The directory path for the landmark model.
     */
    public function getDir(): string
    {
        return AdminController::MAIN_DIR . self::DIR . '/' . intval($this->id / 1000) . '/';
    }

    /**
     * Get all of the custom buttons for the municipality.
     *
     * This function defines a polymorphic one-to-many relationship.
     *
     * @return MorphMany
     */
    public function customButtons(): MorphMany
    {
        return $this->morphMany(CustomButton::class, 'buttonable');
    }

    /**
     * Get the municipality that owns the landmark.
     *
     * @return BelongsTo
     */
    public function municipality(): BelongsTo
    {
        return $this->belongsTo(Municipality::class, 'municipality_id');
    }

    /**
     * Retrieves the logo of the landmark.
     *
     * @param int $size The size of the logo. Defaults to 0.
     * @return string The URL of the logo.
     */
    public function getLogo(int $size = 0): string
    {
        if (!$size) {
            $size = self::MAIN_SIZE;
        } else {
            $size = $size . '_';
        }

        return Helper::getLogo($this->logo, $this->getDir(), $size);
    }

    /**
     * Get the URL for the landmark.
     *
     * @return string The URL for the municipality.
     */
    public function getUrl(): string
    {
        return route('landmark.show', ['slug' => $this->slug, 'id' => $this->id]);
    }

    /* Admin */
    /**
     * Retrieve all landmark with optional filtering by name.
     *
     * @param Request $request The HTTP request object.
     *
     * @return object The collection of municipalities.
     */
    public function getAdminAll(Request $request): object
    {
        $word = $request->get('word');

        $builder = $this->with(['i18n']);

        if ($word) {
            $builder->whereHas('i18n', function ($query) use ($word) {
                $query->where('name', 'like', '%' . $word . '%');
            });
        }

        $builder->orderBy('id', 'desc');

        return $builder->paginate(10);
    }

    /**
     * Retrieve the ID of the related municipality for a given landmark.
     *
     * @param int $landmarkId The ID of the landmark.
     * @return int The ID of the related municipality.
     */
    public function getRelatedMunicipality(int $landmarkId): int
    {
        return $this->where('id', $landmarkId)->pluck('municipality_id', 'id')->first();
    }

    public function getAllLandmarksHomepage(int $limit = 6)
    {
        return $this->where('active', 1)
            ->orderBy('id', 'desc')
            ->whereNull('deleted_at')
            ->take($limit)
            ->get();
    }

    /**
     * Searches for landmarks based on a given word.
     * The search is performed in three stages:
     * 1. Search in the 'name' field.
     * 2. Search in the 'description' field.
     * 3. Search in both 'name' and 'description' fields.
     *
     * The search word is first converted from Latin to Cyrillic characters.
     * The search is performed using MySQL's full-text search in BOOLEAN MODE.
     * Results are ordered by the length of the matched field(s) in descending order.
     *
     * @param string $word The search term to look for.
     * @param int $limit The number of results to return per page. Default is 20.
     * @return LengthAwarePaginator Paginated search results.
     */
    public function searchLandmarks(string $word, int $limit = 20): LengthAwarePaginator
    {
        $word = Helper::latinToCyrillic($word);

        $word = '+' . $word . '*';

        $titleOnly = $this->with(['i18n'])->where('active', 1)->whereHas('i18n', function ($query) use ($word) {
            $query->whereRaw("MATCH(name) AGAINST(? IN BOOLEAN MODE)", [$word])
                ->orderByRaw("LENGTH(name) DESC");
        });

        $descriptionOnly = $this->with(['i18n'])->where('active', 1)->whereHas('i18n', function ($query) use ($word) {
            $query->whereRaw("MATCH(description) AGAINST(? IN BOOLEAN MODE)", [$word])
                ->orderByRaw("LENGTH(description) DESC");
        });

        $titleAndDescription = $this->with(['i18n'])->where('active', 1)->whereHas('i18n', function ($query) use ($word) {
            $query->whereRaw("MATCH(name,description) AGAINST(? IN BOOLEAN MODE)", [$word])
                ->orderByRaw("(LENGTH(name) + LENGTH(description)) DESC");
        });

        $builder = $titleOnly
            ->union($titleAndDescription)
            ->union($descriptionOnly)
        ;

        return $builder->paginate($limit);
    }
}
