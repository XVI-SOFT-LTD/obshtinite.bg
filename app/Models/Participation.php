<?php

namespace App\Models;

use App\Helpers\Helper;
use App\Models\Category;
use App\Http\Traits\I18n;
use Illuminate\Http\Request;
use App\Models\ParticipationGallery;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\SoftDeletes;
use App\Http\Controllers\Admin\AdminController;
use Illuminate\Database\Eloquent\Relations\HasMany;
use Illuminate\Database\Eloquent\Relations\BelongsTo;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Relations\BelongsToMany;

class Participation extends Model
{
    use HasFactory, SoftDeletes, I18n;

    const DIR = 'participation';
    const DIR_GALLERY = 'gallery';

    // cover sizes
    const MAIN_SIZE = 386 . '_';
    const SIZES = [
        [960 => 480],
        [773 => 564],
        [386 => 282],
        [320 => 368],
        [69 => 69],
    ];

    const SIZES_GALLERY = [
        [445 => 621],
        [125 => 175],
    ];

    protected $table = 'participations';

    protected $fillable = [
        'logo',
        'slug',
        'area_id',
        'website',
        'contact_email',
        'contact_phone_one',
        'contact_phone_two',
        'longitude',
        'latitude',
        'position',
        'social_media_links',
        'working_hours',
        'active_from',
        'active_to',
        'active',
        'created_by',
        'updated_by',
    ];

    protected $casts = [
        'social_media_links' => 'array',
        'working_hours' => 'array',
        'active' => 'boolean',
    ];

    /**
     * Get the gallery for the participation.
     *
     * @return HasMany
     */
    public function gallery(): HasMany
    {
        return $this->hasMany(ParticipationGallery::class);
    }

    /**
     * Define a many-to-many relationship with the Category model.
     *
     * This method establishes a relationship between the Participation model
     * and the Category model using a pivot table 'participations_categories'.
     *
     * @return BelongsToMany
     */
    public function categories(): BelongsToMany
    {
        return $this->belongsToMany(Category::class, 'participations_categories', 'participation_id', 'category_id');
    }

    /**
     * Retrieves the directory path for the participation model.
     *
     * This method returns the directory path for the participation model. The directory path is constructed based on the ID of the participation.
     * The directory path is generated by concatenating the main directory path from the AdminController class, the constant DIR from the participation class,
     * and the result of dividing the ID of the participation by 1000.
     *
     * @return string The directory path for the participation model.
     */
    public function getDir(): string
    {
        return AdminController::MAIN_DIR . self::DIR . '/' . intval($this->id / 1000) . '/';
    }

    /**
     * Retrieves the logo of the participation.
     *
     * @param int $size The size of the logo. Defaults to 0.
     * @return string The URL of the logo.
     */
    public function getLogo(int $size = 0): string
    {
        if (!$size) {
            $size = self::MAIN_SIZE;
        } else {
            $size = $size . '_';
        }

        return Helper::getLogo($this->logo, $this->getDir(), $size);
    }

    /**
     * Get the URL for the participation.
     *
     * @return string The URL for the participation.
     */
    public function getUrl(): string
    {
        return route('participations.show', ['slug' => $this->slug, 'id' => $this->id]);
    }

     /* Admin */
    /**
     * Retrieve all participations with optional filtering by name.
     *
     * @param Request $request The HTTP request object.
     *
     * @return object The collection of municipalities.
     */
    public function getAdminAll(Request $request): object
    {
        $word = $request->get('word');

        $builder = $this->with(['i18n']);

        if ($word) {
            $builder->whereHas('i18n', function ($query) use ($word) {
                $query->where('name', 'like', '%' . $word . '%');
            });
        }

        $builder->orderBy('id', 'desc');

        return $builder->paginate(10);
    }

    /**
     * Retrieve the ID of the related area for a given participation.
     *
     * @return int The ID of the related area.
     */
    public function getRelatedArea(): int
    {
        return $this->pluck('area_id', 'id')->first();
    }

    /**
     * Get the municipality that owns the landmark.
     *
     * @return BelongsTo
     */
    public function area(): BelongsTo
    {
        return $this->belongsTo(Area::class);
    }
}